#!/usr/bin/python

DOCUMENTATION = '''
---
module: java_keystore
short_description: Add TLS certificate to Java trusted key store
description:
'''

EXAMPLES = '''

'''

import os
import sys
import glob

def main():

    # Assumes default installation direcotry of Nexpose.
    # This is probably a bad assumption.
    install_dir = "/opt/rapid7/nexpose/"
    jvm_path = glob.glob(install_dir + "_jvm*/")
    jvm_path = ''.join(jvm_path)
    keytool_bin_path = jvm_path + "bin/keytool"

    module = AnsibleModule (
        argument_spec = dict (
            cert = dict(required=True, type='str'),
            alias = dict(required=True, type='str'),
            keystore = dict(required=False, default='cacerts', type='str'),
            password = dict(required=False, default='changeit', type='str'),
            state = dict(required=False, default='present', type='str'),
        ),
        supports_check_mode = True
    )

    cert = module.params['cert']
    alias = module.params['alias']
    keystore = module.params['keystore']
    password = module.params['password']
    state = module.params['state']


    # Get cert fingerprint in order to compare it to existing fingerprints
    keystore_path = install_dir + "plugins/conf/ssl/" + keystore
    openssl_path = module.get_bin_path('openssl')
    if openssl_path is not None:
        rc, out, err = module.run_command(openssl_path + " x509 -noout -fingerprint -in " + cert)
        fingerprint = out.rstrip().split('=')
    else:
        module.fail_json(msg=err, rc=rc, out=out)

    # Compare existing fingerprint to those in the keystore.
    keystore_check_cmd = keytool_bin_path + " -list -keystore " + keystore_path + " -storepass " + password
    (rc, keystore_contents, err) = module.run_command(keystore_check_cmd)
    # module.fail_json(msg=keystore_contents, rc=rc, err=err)

    for line in keystore_contents.split('\n'):
        if line:
            if line.startswith('Certificate fingerprint (SHA1)'):
                words = line.split(': ')

                if words[1] == fingerprint[1]:
                    # If cert is found in the keystore and it's not supposed to be,
                    # remove it.
                    if state == 'absent':
                        keystore_remove_command = keytool_bin_path + " -delete " + " -keystore " + keystore_path + " -alias " + alias + " -storepass " + password + " -noprompt"
                        (rc, out, err) = module.run_command(keystore_remove_command)
                        if rc != 0:
                            module.fail_json(msg=err, rc=rc, out=out, cmd=keystore_remove_command)
                        else:
                            module.exit_json(changed=True, state=state)
                    else:
                        # Exit without changing if cert is already in the keystore.
                        module.exit_json(changed=False, state=state)

    # Exit if cert is not in the keystore and it's not supposed to be
    if state == 'absent':
        module.exit_json(changed=False, state=state)

    # Add the certificate to the keystore.
    keystore_add_command = keytool_bin_path + " -import -file " + cert + " -keystore " + keystore_path + " -alias " + alias + " -storepass " + password + " -noprompt"
    (rc, out, err) = module.run_command(keystore_add_command)
    if rc != 0:
        module.fail_json(msg=err, rc=rc, out=out, cmd=keystore_add_command)
    else:
        module.exit_json(changed=True)

# import module snippets
from ansible.module_utils.basic import *
main()