# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version ">= 1.6.0"

$initscript = <<SCRIPT
      echo initscript. I am provisioning...
      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>initscript machine provisioning "$1

SCRIPT

$masterscript = <<SCRIPT
      echo I am provisioning master...
      
      echo $USER
      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>machine provisioned "$1
	  sudo useradd -s /bin/bash -d /opt/stack -m stack
	  sudo apt-get install sudo -y || yum install -y sudo
	  sudo echo "stack ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
	  sudo apt-get install git -y || sudo yum install -y git
	  git clone https://git.openstack.org/openstack-dev/devstack

      cd /home/vagrant/devstack 

      #echo '[[local|localrc]]' > local.conf
      #echo ADMIN_PASSWORD=secret >> local.conf
      #echo DATABASE_PASSWORD=secret >> local.conf
      #echo RABBIT_PASSWORD=secret >> local.conf
      #echo SERVICE_PASSWORD=secret >> local.conf
      
      #echo '[[local|localrc]]' > .localrc.password
      echo ADMIN_PASSWORD=secret >> .localrc.password
      echo DATABASE_PASSWORD=secret >> .localrc.password
      echo RABBIT_PASSWORD=secret >> .localrc.password
      echo SERVICE_PASSWORD=secret >> .localrc.password
      
      
      
      
      sudo chown -R stack:stack /home/vagrant/devstack
      
      
      
      
     
      
      
      sudo su -c "./stack.sh" -s /bin/sh stack
      #./stack.sh

      ############################ adding image ############################



      #source /home/vagrant/devstack/accrc/admin/admin
      source openrc admin admin
      export OS_PASSWORD=secret
      export OS_AUTH_URL=http://192.168.1.227/identity/v3
      export OS_IDENTITY_API_VERSION=3

      cd /home/vagrant
       
      openstack server list
            
      #wget http://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img
      #openstack image create --disk-format qcow2 --container-format bare  --public --file /home/vagrant/xenial-server-cloudimg-amd64-disk1.img xenial-server-cloudimg-amd64
      
      #wget http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2
      #openstack image create --disk-format qcow2 --container-format bare  --public --file /home/vagrant/CentOS-7-x86_64-GenericCloud.qcow2 CentOS-7-x86_64-GenericCloud.qcow2
      
      #wget http://cdimage.debian.org/cdimage/openstack/current/debian-9.3.3-20180105-openstack-amd64.qcow2
      #openstack image create --container-format bare --disk-format qcow2 --file /home/vagrant/debian-9.3.3-20180105-openstack-amd64.qcow2 debian-9-openstack-amd64
      
      #wget https://download.fedoraproject.org/pub/fedora/linux/releases/27/CloudImages/x86_64/images/Fedora-Cloud-Base-27-1.6.x86_64.qcow2
      #openstack image create --container-format bare --disk-format qcow2 --file /home/vagrant/Fedora-Cloud-Base-27-1.6.x86_64.qcow2 Fedora-Cloud-Base-27-1.6.x86_64
      
      
      
SCRIPT

$nodescript = <<SCRIPT
      echo provisioning node ...
      sudo apt install -y nova-compute
      
      
      #sudo cp /etc/nova/nova.confOLD /etc/nova/nova.conf
      
      NOVA_HOST=openstackmaster
      NOVA_PASS=secret
      
      DB_HOST=openstackmaster
      DB_USER=root
      DB_PASS=secret
      RABBIT_USER=stackrabbit
      RABBIT_PASS=secret
      RABBIT_HOST=openstackmaster
      
      MY_IP=192.168.1.228

		# remuje connection=
      sudo sed -i -r '/connection=/ s/^(.*)$/#\1/g' /etc/nova/nova.conf

	  SED_RABBIT="sudo sed -i -- 's/\[DEFAULT\]/\[DEFAULT\]\ntransport_url = rabbit:\\/\\/$RABBIT_USER:$RABBIT_PASS@$RABBIT_HOST\nmy_ip = $MY_IP\nuse_neutron = True\nfirewall_driver = nova.virt.firewall.NoopFirewallDriver/g' /etc/nova/nova.conf"
      eval $SED_RABBIT
            
	  SED_RABBIT="sudo sed -i -- 's/\[database\]/\[database\]\nconnection = mysql+pymysql:\/\/$DB_USER:$DB_PASS@$DB_HOST\/nova_api/g' /etc/nova/nova.conf"
      eval $SED_RABBIT
            
      sudo sh -c "echo '
      
[api]
auth_strategy = keystone

[keystone_authtoken]
auth_uri = http://$NOVA_HOST:5000
auth_url = http://$NOVA_HOST:35357
memcached_servers = $NOVA_HOST:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = nova
password = $NOVA_PASS' >> /etc/nova/nova.conf"



      sudo sh -c "echo '
      
[vnc]
enabled = True
vncserver_listen = 0.0.0.0
vncserver_proxyclient_address = \$my_ip
novncproxy_base_url = http://$NOVA_HOST:6080/vnc_auto.html' >> /etc/nova/nova.conf"


      sudo sh -c "echo '
      
[glance]
api_servers = http://$NOVA_HOST:9292' >> /etc/nova/nova.conf"

      sudo sh -c "echo '
      
[oslo_concurrency]
lock_path = /var/lib/nova/tmp' >> /etc/nova/nova.conf"



    sudo sed -i -r '/virt_type=kvm/ s/^(.*)$/#\1/g' /etc/nova/nova-compute.conf


   sudo sh -c "echo '
virt_type = qemu' >> /etc/nova/nova-compute.conf"



      
      sudo cat /etc/nova/nova.conf
      
      
      sudo service nova-compute restart
      sudo tail -f /var/log/syslog
      
      
      
      # add parameter in DEFAULT
      #sudo sed -i '$SED_RABBIT' /etc/nova/nova.conf
      #sudo sed -i $SED_RABBIT /etc/nova/nova.conf
      
      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>machine provisioning "$1

SCRIPT


boxes = [
    {
        :name => "openstackmaster",
        :interface => "enp3s0",
        :mac=> "5CA1AB1E0001",
        :ip => "192.168.10.10",
        :mem => "15375",
        :cpu => "1"
    },
    {
        :name => "openstacknode1",
        :interface => "enp3s0",
        :mac=> "5CA1AB1E0002",
        :ip => "192.168.10.11",
        :mem => "15375",
        :cpu => "1"
    }]

Vagrant.configure(2) do |config|

  config.vm.box = "ubuntu/xenial64"
#  config.vm.box = "ubuntu/trusty64"
#  config.vm.box = "bento/ubuntu-16.04"
  
  #config.vm.box_version = "20171212.0.0"

  boxes.each do |opts|
      config.vm.define opts[:name] do |config|
        config.vm.hostname = opts[:name]
        #config.vm.network :forwarded_port, host: 2222, guest: 22
        #config.ssh.username = "ubuntu"
        #config.ssh.password = "379a8188cba8c5e64b9a429f"

        config.vm.provider "virtualbox" do |v|
          v.customize ["modifyvm", :id, "--memory", opts[:mem]]
          v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]
          v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
          v.name = opts[:name]
        end

        config.vm.network "public_network", bridge: opts[:interface], type: "dhcp" , mac: opts[:mac]        
        #config.vm.network "public_network", bridge: opts[:interface] , mac: opts[:mac], ip: opts[:ip]
        #config.vm.network "private_network" ,  bridge: opts[:interface], ip: opts[:ip]
        
      end
  end






  boxes.each do |opts|
    config.vm.define opts[:name] do |config|
      config.vm.provision "shell" do |s|
        s.privileged = false
        s.inline = $initscript
        s.args = opts[:ip]
      end


 # default router
  config.vm.provision "shell",
    run: "always",
    inline: "sudo route add default gw 192.168.1.1"

  # default router ipv6
  config.vm.provision "shell",
    run: "always",
    inline: "#sudo route -A inet6 add default gw fe80::5ea1:abff:fe1e:1 dev enp0s8"

  # delete default gw on enp0s3 
  config.vm.provision "shell",
    run: "always",
    inline: "sudo route del default gw 10.0.2.2"



    end
  end





   config.vm.define  "openstackmaster" do |config|
      config.vm.provision "shell" do |s|
        s.inline = $masterscript
        s.args = "192.168.10.10"
      end
    end




   config.vm.define  "openstacknode1" do |config|
      config.vm.provision "shell" do |s|
        s.inline = $nodescript
        s.args = "192.168.10.10"
      end
    end





end
