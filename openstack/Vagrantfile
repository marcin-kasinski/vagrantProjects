# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version ">= 1.6.0"

$initscript = <<SCRIPT
      echo initscript. I am provisioning...
      
      echo $USER
      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>initscript machine provisioning "$1
      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>initscript machine provisioning "$2
	
	


SCRIPT

$masterscript = <<SCRIPT

      echo I am provisioning master...
            
      #sudo sed -i -r '/openstackmaster/ s/^(.*)$/#\1/g' /etc/hosts

	  #sudo sh -c "echo '192.168.33.10      openstackmaster' >> /etc/hosts"
      
      
      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>machine provisioned "$1
      
      rm -rf /vagrant_data/opt
      mkdir /vagrant_data/opt
      mkdir /vagrant_data/opt/stack
	  #sudo useradd -s /bin/bash -d /vagrant_data/opt/stack -m stack
	  sudo apt-get install sudo -y || yum install -y sudo
	  sudo apt-get install mc -y 
	  #sudo sh -c "echo 'stack ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers.d/stack"      
	  
	  
	  sudo apt update
	  sudo apt install -y python-systemd
	  sudo apt-get install git -y || sudo yum install -y git
	  
	  #sudo chown -R vagrant:vagrant /opt
      cd /vagrant_data/opt/stack
      git clone --branch stable/pike https://git.openstack.org/openstack-dev/devstack

      #sudo cp /vagrant/controller_local.conf /vagrant_data/opt/stack/devstack/local.conf 
      #sudo cp /vagrant/controller_local_private.conf /vagrant_data/opt/stack/devstack/local.conf 
      sudo cp /vagrant/ctr_local.conf /vagrant_data/opt/stack/devstack/local.conf 
      
      
      #sudo cp /vagrant/controller_localFromudemy.conf /vagrant_data/opt/stack/devstack/local.conf 
      
      sed -i -e 's/\r//g' /vagrant_data/opt/stack/devstack/local.conf
      
      cp /vagrant/localrc.password /vagrant_data/opt/stack/devstack/.localrc.password 
      
      #sudo chown -R stack:stack /vagrant_data/opt/stack/devstack

	  cd /vagrant_data/opt/stack/devstack
	  ./stack.sh

      #sudo -S -u stack -i /bin/bash -l -c 'cd /vagrant_data/opt/stack/devstack ;./stack.sh'
 
      ############################ adding image ############################

      source /vagrant_data/opt/stack/devstack/openrc demo demo
      #export OS_PASSWORD=secret
      #export OS_AUTH_URL=http://192.168.33.10/identity/v3
      #export OS_IDENTITY_API_VERSION=3
      
      
      openstack security group create SSH
	  openstack security group rule create --proto tcp --dst-port 22 SSH

      openstack security group create ICMP	  
	  openstack security group rule create --proto icmp --dst-port 0 ICMP

	  ip --oneline addr show
	  

      #openstack server list
           
      #wget http://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img
      #openstack image create --disk-format qcow2 --container-format bare  --public --file /home/vagrant/xenial-server-cloudimg-amd64-disk1.img xenial-server-cloudimg-amd64
      
      #wget http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2
      #openstack image create --disk-format qcow2 --container-format bare  --public --file /home/vagrant/CentOS-7-x86_64-GenericCloud.qcow2 CentOS-7-x86_64-GenericCloud.qcow2
      
      #wget http://cdimage.debian.org/cdimage/openstack/current/debian-9.3.3-20180105-openstack-amd64.qcow2
      #openstack image create --container-format bare --disk-format qcow2 --file /home/vagrant/debian-9.3.3-20180105-openstack-amd64.qcow2 debian-9-openstack-amd64
      
      #wget https://download.fedoraproject.org/pub/fedora/linux/releases/27/CloudImages/x86_64/images/Fedora-Cloud-Base-27-1.6.x86_64.qcow2
      #openstack image create --container-format bare --disk-format qcow2 --file /home/vagrant/Fedora-Cloud-Base-27-1.6.x86_64.qcow2 Fedora-Cloud-Base-27-1.6.x86_64
      
       
      
SCRIPT

$nodescript = <<SCRIPT

    echo I am provisioning node...
		
      sudo sed -i -r '/openstacknode1/ s/^(.*)$/#\1/g' /etc/hosts

	  sudo sh -c "echo '192.168.33.11      openstacknode1' >> /etc/hosts"
      
      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>machine provisioned "$1
      
      rm -rf /vagrant_data/opt
      mkdir /vagrant_data/opt
      mkdir /vagrant_data/opt/stack
	  #sudo useradd -s /bin/bash -d /vagrant_data/opt/stack -m stack
	  sudo apt-get install sudo -y || yum install -y sudo
	  sudo apt-get install mc -y 
	  #sudo sh -c "echo 'stack ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers.d/stack"      
	  
	  
	  sudo apt update
	  sudo apt install -y python-systemd
	  sudo apt-get install git -y || sudo yum install -y git
	  

	  sudo chown -R vagrant:vagrant /opt
      cd /vagrant_data/opt/stack
      git clone --branch stable/pike https://git.openstack.org/openstack-dev/devstack

      #sudo cp /vagrant/controller_local.conf /vagrant_data/opt/stack/devstack/local.conf 
	  sudo cp /vagrant/compute_local.conf /vagrant_data/opt/stack/devstack/local.conf
      
      sed -i -e 's/\r//g' /vagrant_data/opt/stack/devstack/local.conf
      
      cp /vagrant/localrc.password /vagrant_data/opt/stack/devstack/.localrc.password 
      
      #sudo chown -R stack:stack /vagrant_data/opt/stack/devstack

	  cd /vagrant_data/opt/stack/devstack
		./stack.sh

      #sudo -S -u stack -i /bin/bash -l -c 'cd /vagrant_data/opt/stack/devstack ;./stack.sh'
 
      ############################ adding image ############################

      #source /vagrant_data/opt/stack/devstack/openrc admin admin
      #export OS_PASSWORD=secret
      #export OS_AUTH_URL=http://192.168.33.10/identity/v3
      #export OS_IDENTITY_API_VERSION=3

      #openstack server list


  
SCRIPT

boxes = [
    {
        :name => "openstackmaster",
        :interface => "enp3s0",
        :mac=> "5CA1AB1E0001",
#        :ip => "192.168.1.11",
        :ip => "192.168.33.10",
        :mem => "8192",
        :cpu => "1",
        :share_folder_host => "/vagrantprojects/data/openstackmaster",
        :initscript => "/vagrant/master.sh"
    },
    {
        :name => "openstacknode1",
        :interface => "enp3s0",
        :mac=> "5CA1AB1E0002",
#        :ip => "192.168.33.11",
        :ip => "192.168.1.12",
        :mem => "8192",
        :cpu => "1",
        :share_folder_host => "/vagrantprojects/data/openstacknode1",
        :initscript => "/vagrant/node.sh"
    },
    {
        :name => "openstacknode2",
        :interface => "enp3s0",
        :mac=> "5CA1AB1E0003",
#        :ip => "192.168.33.12",
        :ip => "192.168.1.13",
        :mem => "8192",
        :cpu => "1",
        :share_folder_host => "/vagrantprojects/data/openstacknode2",
        :initscript => "/vagrant/node.sh"
    }]

Vagrant.configure(2) do |config|

  config.vm.box = "ubuntu/xenial64"
#  config.vm.box = "ubuntu/trusty64"
#  config.vm.box = "bento/ubuntu-16.04"
  
  #config.vm.box_version = "20171212.0.0"

  boxes.each do |opts|
      config.vm.define opts[:name] do |config|
        config.vm.hostname = opts[:name]
        config.vm.synced_folder opts[:share_folder_host], "/vagrant_data"
        
        #config.vm.network :forwarded_port, host: 2222, guest: 22
        #config.ssh.username = "ubuntu"
        #config.ssh.password = "379a8188cba8c5e64b9a429f"

        config.vm.provider "virtualbox" do |v|
          v.customize ["modifyvm", :id, "--memory", opts[:mem]]
          v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]
          #v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
          #v.customize ['modifyvm', :id, '--natnet1', '192.168.222.0/24']

          v.name = opts[:name]
        end

        #config.vm.network "public_network", bridge: opts[:interface], type: "dhcp" , mac: opts[:mac]        
        #config.vm.network "public_network", bridge: opts[:interface] , mac: opts[:mac], ip: opts[:ip]
        
        #poni¿sz dzia³a dla sieci prywatnej         
        config.vm.network "private_network", ip: opts[:ip],  bridge: opts[:interface],mac: opts[:mac]
        config.vm.network "public_network", auto_config: false, bridge: "enp3s0"

      end
  end






  boxes.each do |opts|
    config.vm.define opts[:name] do |config|
      config.vm.provision "shell" do |s|
        #s.privileged = false
        s.inline = $initscript
        s.args = [opts[:ip] , opts[:initscript]]
      end


# default router
#  config.vm.provision "shell",
#    run: "always",
#    inline: "sudo route add default gw 192.168.1.1"

# default router ipv6
#  config.vm.provision "shell",
#    run: "always",
#    inline: "#sudo route -A inet6 add default gw fe80::5ea1:abff:fe1e:1 dev enp0s8"

# delete default gw on enp0s3 
#  config.vm.provision "shell",
#    run: "always",
#    inline: "sudo route del default gw 10.0.2.2"

# delete default gw on enp0s3 
#  config.vm.provision "shell",
#    run: "always",
#    inline: "sudo route del default gw 192.168.222.2"





    end
  end





   config.vm.define  "openstackmaster" do |config|
     config.vm.network "forwarded_port", guest: 80, host: 8080
      config.vm.provision "shell" do |s|
        s.inline = $masterscript
        s.privileged = false
        s.args = "192.168.42.11"
      end
    end


   config.vm.define  "openstacknode1" do |config|

      config.vm.provision "shell" do |s|
        s.inline = $nodescript
        s.privileged = false
        s.args = "192.168.1.12"
      end
    end






end
