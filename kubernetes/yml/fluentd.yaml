kind: ConfigMap
metadata:
  name: fluent-cm
  namespace: kube-system
apiVersion: v1
data:
  fluent.conf: |-
    #@include systemd.conf
    @include kubernetes.conf
    @include kafka.conf

---
kind: ConfigMap
metadata:
  name: fluent-kubernetes-cm
  namespace: kube-system
apiVersion: v1
data:
  kubernetes.conf: |-
    <match fluent.**>
      @type null
    </match>
    
    <source>
      @type tail
      @id in_tail_container_logs
      #path /var/log/containers/*.log
      path /var/log/containers/springbootweb-*.log
      pos_file /var/log/fluentd-containers.log.pos
      tag kubernetes.*
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>    
---
kind: ConfigMap
metadata:
  name: fluent-kafka-cm
  namespace: kube-system
apiVersion: v1
data:
  kafka.conf: |-
    <match **>
      @type kafka_buffered
      @id out_kafka
    
      brokers "#{ENV['FLUENT_KAFKA_BROKERS']}"
    
      default_topic "#{ENV['FLUENT_KAFKA_DEFAULT_TOPIC'] || nil}"
      default_partition_key "#{ENV['FLUENT_KAFKA_DEFAULT_PARTITION_KEY'] || nil}"
      default_message_key "#{ENV['FLUENT_KAFKA_DEFAULT_MESSAGE_KEY'] || nil}"
      output_data_type "#{ENV['FLUENT_KAFKA_OUTPUT_DATA_TYPE'] || 'json'}"
      output_include_tag "#{ENV['FLUENT_KAFKA_OUTPUT_INCLUDE_TAG'] || false}"
      output_include_time "#{ENV['FLUENT_KAFKA_OUTPUT_INCLUDE_TIME'] || false}"
      exclude_topic_key "#{ENV['FLUENT_KAFKA_EXCLUDE_TOPIC_KEY'] || false}"
      exclude_partition_key "#{ENV['FLUENT_KAFKA_EXCLUDE_PARTITION_KEY'] || false}"
      get_kafka_client_log "#{ENV['FLUENT_KAFKA_GET_KAFKA_CLIENT_LOG'] || false}"
    
      # ruby-kafka producer options
      max_send_retries "#{ENV['FLUENT_KAFKA_MAX_SEND_RETRIES'] || 1}"
      required_acks "#{ENV['FLUENT_KAFKA_REQUIRED_ACKS'] || -1}"
      ack_timeout "#{ENV['FLUENT_KAFKA_ACK_TIMEOUT'] || nil}"
      compression_codec "#{ENV['FLUENT_KAFKA_COMPRESSION_CODEC'] || nil}"
      max_send_limit_bytes "#{ENV['FLUENT_KAFKA_MAX_SEND_LIMIT_BYTES'] || nil}"
      discard_kafka_delivery_failed "#{ENV['FLUENT_KAFKA_DISCARD_KAFKA_DELIVERY_FAILED'] || false}"
    </match>
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: fluentd
  namespace: kube-system
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  verbs:
  - get
  - list
  - watch

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: fluentd
roleRef:
  kind: ClusterRole
  name: fluentd
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: fluentd
  namespace: kube-system
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: kube-system
  labels:
    k8s-app: fluentd-logging
    version: v1
    kubernetes.io/cluster-service: "true"
spec:
  template:
    metadata:
      labels:
        k8s-app: fluentd-logging
        version: v1
        kubernetes.io/cluster-service: "true"
    spec:
      serviceAccount: fluentd
      serviceAccountName: fluentd
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: fluentd
        image: fluent/fluentd-kubernetes-daemonset:v1.2-debian-kafka
        env:
          - name: FLUENT_UID
            value: "0"
          - name: FLUENT_KAFKA_COMPRESSION_CODEC
            value: "gzip"
          - name: FLUENT_KAFKA_MAX_SEND_LIMIT_BYTES
            value: "1000000"
          - name: FLUENT_KAFKA_DEFAULT_TOPIC
            value: "fluentd-logs"
          - name: FLUENT_KAFKA_BROKERS
            value: "kafka-0.k-hs.default.svc.cluster.local:9092,kafka-1.k-hs.default.svc.cluster.local:9092,kafka-2.k-hs.default.svc.cluster.local:9092"
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: config-fluent-kafka-cm
          mountPath: /fluentd/etc/kafka.conf
          subPath: kafka.conf        
        #- name: config-fluent-kubernetes-cm
        #  mountPath: /fluentd/etc/kubernetes.conf
        #  subPath: kubernetes.conf
        - name: config-fluent-cm
          mountPath: /fluentd/etc/fluent.conf
          subPath: fluent.conf
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
      - name: config-fluent-kafka-cm
        configMap:
          name: fluent-kafka-cm
      - name: config-fluent-kubernetes-cm
        configMap:
          name: fluent-kubernetes-cm
      - name: config-fluent-cm
        configMap:
          name: fluent-cm
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
