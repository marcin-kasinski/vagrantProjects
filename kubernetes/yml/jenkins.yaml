kind: ConfigMap
metadata:
  name: jenkins-plugins-cm
  namespace: default
apiVersion: v1
data:
  plugins.txt: |-
    ace-editor
    ant
    antisamy-markup-formatter
    apache-httpcomponents-client-4-api
    artifactory
    authentication-tokens
    bouncycastle-api
    branch-api
    build-timeout
    cloudbees-folder
    command-launcher
    copyartifact
    credentials
    credentials-binding
    display-url-api
    docker-commons
    docker-workflow
    durable-task
    email-ext
    git
    git-client
    git-server
    github
    github-api
    github-branch-source
    gradle
    handlebars
    jackson2-api
    javadoc
    jdk-tool
    jquery-detached
    jsch
    junit
    ldap
    locale
    lockable-resources
    mailer
    mapdb-api
    matrix-auth
    matrix-project
    maven-plugin
    momentjs
    pam-auth
    pipeline-build-step
    pipeline-github-lib
    pipeline-graph-analysis
    pipeline-input-step
    pipeline-milestone-step
    pipeline-model-api
    pipeline-model-declarative-agent
    pipeline-model-definition
    pipeline-model-extensions
    pipeline-rest-api
    pipeline-stage-step
    pipeline-stage-tags-metadata
    pipeline-stage-view
    plain-credentials
    resource-disposer
    scm-api
    script-security
    ssh-credentials
    ssh-slaves
    structs
    subversion
    timestamper
    token-macro
    trilead-api
    workflow-aggregator
    workflow-api
    workflow-basic-steps
    workflow-cps
    workflow-cps-global-lib
    workflow-durable-task-step
    workflow-job
    workflow-multibranch
    workflow-scm-step
    workflow-step-api
    workflow-support
    ws-cleanup
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfsjenkins
spec:
  capacity:
    storage: 1Mi
  accessModes:
    - ReadWriteMany
  nfs:
    # FIXME: use the right IP
    server: k8smaster.local
    path: "/var/nfs/jenkins"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfsjenkins
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 1Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins-deployment
spec:
  replicas: 1    
  selector:
    matchLabels:
      app: jenkins    
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      containers:
      - name: jenkins
        #image: jenkins
        image: jenkins/jenkins
        command: ["/bin/sh"]
        args: ["-c", "echo MK;apt update ;apt install -y maven ;/usr/local/bin/install-plugins.sh < /plugins.txt; /usr/local/bin/jenkins.sh"]
        securityContext:
          privileged: true
          runAsUser: 0
        ports:
        - name: jenkins-port1
          containerPort: 8080
        - name: jenkins-port2
          containerPort: 50000
        env:
        - name: JAVA_OPTS
          value: "-Xmx2048m -XX:MaxPermSize=512m -Djenkins.install.runSetupWizard=false"
        volumeMounts:
        - name: nfsjenkins
          mountPath: /var/jenkins_home
        - name: config-jenkins-plugins-cm
          mountPath: /plugins.txt
          subPath: plugins.txt
      volumes:
      - name: nfsjenkins
        persistentVolumeClaim:
          claimName: nfsjenkins
      - name: config-jenkins-plugins-cm
        configMap:
          name: jenkins-plugins-cm          
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
spec:
  type: NodePort
  ports:
  - port: 8080
    nodePort: 31888
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 50000
    nodePort: 32000
    targetPort: 50000
    protocol: TCP
    name: http2
  selector:
    app: jenkins
---
# An Ingress with 2 hosts and 3 endpoints
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jenkins-ingress
spec:
  rules:
  - host: jenkins
    http:
      paths:
      - path: /
        backend:
          serviceName: jenkins
          servicePort: 8080
