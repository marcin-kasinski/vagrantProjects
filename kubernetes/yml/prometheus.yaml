kind: ConfigMap
metadata:
  name: prometheus-alert-rules-cm
  namespace: default
apiVersion: v1
data:
  alert.rules: |-
    groups:
    - name: example
      rules:
      - alert: SpringbootmicroserviceDown
        expr: count(process_cpu_usage{app="springbootmicroservice" }) <3
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Instance {{ $labels.instance }} down"
          description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minute."
      - alert: KafkaRule
        expr: sum without(area)(jvm_memory_bytes_used{ app="kafka"}) >11
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Instance kafka {{ $labels.instance }} down"
          description: "Kafka {{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minute."
          
          
---
kind: ConfigMap
metadata:
  name: prometheus-config-prometheus.yml
  namespace: default
apiVersion: v1
data:
  prometheus.yml: |-
    global:
      scrape_interval:     5s
      evaluation_interval: 5s
      external_labels:
        monitor: 'prometheus.cloudapps.cloud-cafe.in'
        type: 'kubernetes'
    # Alertmanager configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager-0.alertmanager-hs.default.svc.cluster.local:9093
          - alertmanager-1.alertmanager-hs.default.svc.cluster.local:9093
          - alertmanager-2.alertmanager-hs.default.svc.cluster.local:9093
    rule_files:
    - '/etc/prometheus-rules/alert.rules'
    scrape_configs:
    - job_name: 'kubernetes-cluster'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # Prometheuse query will be disable from URL if you uncomment below line
        #insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
      kubernetes_sd_configs:
      - role: endpoints

    - job_name: 'kubernetes-nodes'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # Prometheuse query will be disable from URL if you uncomment below line
        #insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

    - job_name: 'kubernetes-service-endpoints'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        regex: (.+)
        target_label: __metrics_path__
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: (.+)(?::\d+);(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_service_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name

    - job_name: 'kubernetes-services'
      metrics_path: /probe
      params:
        module: [http_2xx]
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
        action: keep
        regex: true
      - source_labels: []
        target_label: __address__
        replacement: blackbox
      - source_labels: [__address__]
        regex: (.*)(:80)?
        target_label: __param_target
      - source_labels: [__meta_kubernetes_service_name,__meta_kubernetes_service_namespace]
        target_label: __param_target
        regex: ([^;]+);(.+)
        replacement: $1.$2.svc
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_service_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
    - job_name: 'kubernetes-pods'
      # if you want to use metrics on jobs, set the below field to
      # true to prevent Prometheus from setting the `job` label
      # automatically.
      honor_labels: false
      kubernetes_sd_configs:
      - role: pod
      # skip verification so you can do HTTPS to pods
      tls_config:
        insecure_skip_verify: true
      # make sure your labels are in order
      relabel_configs:
      # these labels tell Prometheus to automatically attach source
      # pod and namespace information to each collected sample, so
      # that they'll be exposed in the custom metrics API automatically.
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)      
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
      # these labels tell Prometheus to look for
      # prometheus.io/{scrape,path,port} annotations to configure
      # how to scrape
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (.+)



---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: default
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  labels:
    app: prometheus  
spec:
  serviceName: "prometheus-hs"
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel  
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        #image: quay.io/prometheus/prometheus
        image: prom/prometheus
        args: [ "--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.path=/prometheus", "--web.console.libraries=/usr/share/prometheus/console_libraries", "--web.console.templates=/usr/share/prometheus/consoles" ]
        ports:
        - name: prometheus-port
          containerPort: 9090
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "secret"
        - name: MYSQL_HOST
          value: "mysql"
        - name: PMA_HOST
          value: "mysql"
        volumeMounts:
        - name: config-volume-prometheus-yml
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
        - name: prometheus-alert-rules
          mountPath: /etc/prometheus-rules/alert.rules
          subPath: alert.rules
      volumes:
        - name: config-volume-prometheus-yml
          configMap:
            name: prometheus-config-prometheus.yml	
        - name: prometheus-alert-rules
          configMap:
            name: prometheus-alert-rules-cm	
          
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-cs
  labels:
    app: prometheus
spec:
  type: NodePort
  ports:
  - port: 9090
    targetPort: 9090
    name: client
  selector:
    app: prometheus
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-hs
  labels:
    app: prometheus
spec:
  ports:
  - port: 9090
    name: server
  clusterIP: None
  selector:
    app: prometheus
---
# An Ingress with 2 hosts and 3 endpoints
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: prometheus-ingress
spec:
  rules:
  - host: prometheus
    http:
      paths:
      - path: /
        backend:
          serviceName: prometheus-hs
          servicePort: 9090
