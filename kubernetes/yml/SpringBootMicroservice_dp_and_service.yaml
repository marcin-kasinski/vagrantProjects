apiVersion: apps/v1
kind: Deployment
metadata:
  name: springbootmicroservice-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: springbootmicroservice    
  template:
    metadata:
      labels:
        app: springbootmicroservice
    spec:
      initContainers:
      - name: init-springbootmicroservice-monitoring
        image: openjdk:8
        command: ['sh', '-c', 'apt update && apt install -y netcat && echo "Waiting monitoring to launch"  && while ! nc -z monitoring-influxdb.kube-system.svc.cluster.local 8086; do   echo "waiting..." ; sleep 5 ; done ;  curl -POST http://monitoring-influxdb.kube-system.svc.cluster.local:8086/query --data-urlencode "q=CREATE DATABASE metrics"']
      - name: init-springbootmicroservice-mysql
        image: openjdk:8
        command: ['sh', '-c', 'apt update && apt install -y netcat && echo "Waiting mysql to launch"  && while ! nc -z mysql.default.svc.cluster.local 3306; do   echo "waiting..." ; sleep 5 ; done ;        apt-get install -y mysql-client  && ls -l ']
      containers:
      - name: springbootmicroservice
        image: marcinkasinski/springbootmicroservice
        imagePullPolicy: Always
        ports:
        - name: http-port
          containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: springbootmicroservice
spec:
  type: NodePort
  ports:
  - port: 8081
    nodePort: 30081
    targetPort: 8081
    protocol: TCP
    name: http
  selector:
    app: springbootmicroservice
---
# An Ingress with 2 hosts and 3 endpoints
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: springbootmicroservice-ingress
  annotations:
    ingress.kubernetes.io/enable-cors: "true"
    ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: springbootmicroservice
    http:
      paths:
      - path: /
        backend:
          serviceName: springbootmicroservice
          servicePort: 8081
