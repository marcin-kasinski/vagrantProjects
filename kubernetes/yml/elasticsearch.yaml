# RBAC authn and authz
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elasticsearch-logging
  namespace: default
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
  - ""
  resources:
  - "services"
  - "namespaces"
  - "endpoints"
  verbs:
  - "get"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
- kind: ServiceAccount
  name: elasticsearch-logging
  namespace: default
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: elasticsearch-logging
  apiGroup: ""
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-logging
spec:
  serviceName: elasticsearch-logging-hs
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: elasticsearch-logging
  template:
    metadata:
      labels:
        app: elasticsearch-logging
        kubernetes.io/name: "elasticsearch-logging"
        tier: backend
    spec:
      containers:
#      - image: gcr.io/google-containers/elasticsearch:v5.5.1-1
      - image: docker.elastic.co/elasticsearch/elasticsearch:6.3.2
        name: elasticsearch-logging
        resources:
          # need more cpu upon initialization, therefore burstable class
          limits:
            cpu: 1000m
            memory: 2.5Gi
          requests:
            memory: 2.5Gi
            cpu: 100m
        ports:
        - containerPort: 9200
          name: web
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        #- name: NODE_NAME
        #  valueFrom:
        #    fieldRef:
        #      fieldPath: metadata.name
        #- name: "node.name"
        #  valueFrom:
        #    fieldRef:
        #      fieldPath: metadata.name
        - name: "node.name"
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        #- name: "cluster.name"
        #  value: myesdb
        #- name: CLUSTER_NAME
        #  value: myesdb
        #- name: "discovery.zen.ping.unicast.hosts"
        #  value: "'elasticsearch-logging-0.elasticsearch-logging-hs.default.svc.cluster.local','elasticsearch-logging-1.elasticsearch-logging-hs.default.svc.cluster.local','elasticsearch-logging-2.elasticsearch-logging-hs.default.svc.cluster.local','elasticsearch-logging-2','elasticsearch-data-0','elasticsearch-data-1','elasticsearch-data-2'"          
        - name: NUMBER_OF_MASTERS
          value: "2"
        - name: NODE_MASTER
          value: "true"
        - name: "node.master"
          value: "true"
        - name: NODE_INGEST
          value: "false"
        - name: NODE_DATA
          value: "false"
        - name: "node.data"
          value: "false"
        - name: HTTP_ENABLE
          value: "false"
        - name: ES_JAVA_OPTS
          value: -Xms256m -Xmx256m
        - name: PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
      # Elasticsearch requires vm.max_map_count to be at least 262144.
      # If your OS already sets up this number to a higher value, feel free
      # to remove this init container.
      initContainers:
      - image: alpine:3.6
        command: ["/sbin/sysctl", "-w", "vm.max_map_count=262144"]
        name: elasticsearch-logging-init
        securityContext:
          privileged: true
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-logging
  namespace: default
  labels:
    app: elasticsearch-logging
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "Elasticsearch"
spec:
  type: NodePort
  ports:
  - port: 9200
    protocol: TCP
    name: web
  - port: 9300
    protocol: TCP
    name: transport
  selector:
    k8s-app: elasticsearch-logging
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-logging-hs
  labels:
    app: elasticsearch-logging
spec:
  ports:
  - port: 9200
    name: web
  - port: 9300
    name: transport
  clusterIP: None
  selector:
    app: elasticsearch-logging
---

# An Ingress with 2 hosts and 3 endpoints
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: elasticsearch-logging-ingress
spec:
  rules:
  - host: elasticsearch
    http:
      paths:
      - path: /
        backend:
          serviceName: elasticsearch-logging
          servicePort: 9200
  