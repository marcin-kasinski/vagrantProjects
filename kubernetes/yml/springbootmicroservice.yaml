kind: ConfigMap
metadata:
  name: springbootmicroservice-bootstrap-yml-cm
  namespace: default
apiVersion: v1
data:
  bootstrap.yml: |-
    

    hystrix.command.addUser.execution.isolation.thread.timeoutInMilliseconds: 5000
    hystrix.command.addUser.circuitBreaker.errorThresholdPercentage: 60
    hystrix.command.addUser.circuitBreaker.sleepWindowInMilliseconds: 60000
    #ile requestów ma obsłużyć zanim uzna, że jest błąd
    hystrix.command.addUser.circuitBreaker.requestVolumeThreshold: 1
    logging:
        file: logs/application.log
        level:
            io:
                micrometer:
                    graphite: DEBUG
            org.springframework.data.redis: DEBUG
            root: INFO
    server:
        port: 9191
    #    influxdbeserver: monitoring-influxdb.kube-system.svc.cluster.local                
        influxdbeserver: monitoring-influxdb
    management.metrics.export.graphite:
        host: graphite
        port: 2003 
        protocol: Plaintext
        enabled: true
        step: 10s    
    #management.metrics.export.influx:
    #    uri: http://monitoring-influxdb:30080
    spring:
        cache.type: redis
        #redis.host: redis-0.redis-hs.default.svc.cluster.local
        #redis.port: 6379
        redis.cluster.nodes: "redis-0.redis-hs.default.svc.cluster.local:6379,redis-1.redis-hs.default.svc.cluster.local:6379,redis-2.redis-hs.default.svc.cluster.local:6379,redis-3.redis-hs.default.svc.cluster.local:6379,redis-4.redis-hs.default.svc.cluster.local:6379,redis-5.redis-hs.default.svc.cluster.local:6379"
        #cache.cache-names: cache1,cache2
        cache.redis.time-to-live: 60000
        application:
            name: SpringBootMicroservice
            
        cloud:
            consul:
                discovery:
                    preferIpAddress: true
                    instanceId: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}
                port: 8500        
            config:
                enabled: true
                data-key: props
                prefix: config
                format: PROPERTIES        
    #spring.jpa.hibernate.ddl-auto=create
        datasource:
            hikari:
                connection-test-query: SELECT 1 FROM DUAL
                minimum-idle: 1
                maximum-pool-size: 5
                pool-name: yourPoolName
                auto-commit: true
            url: jdbc:mysql://mysql:3306/test
            username: root
            password: secret
    #spring.datasource.driver-class-name=Driver
        data:
            mongodb:
                uri: ${MONGODB_URL:"mongodb://mongodb-router-cs.default.svc.cluster.local:27017/mkdatabase"}
    # Allows Hibernate to generate SQL optimized for a particular DBMS
        jpa:
            properties:
                hibernate.dialect: org.hibernate.dialect.MySQL5Dialect
                hibernate.show_sql: true
        rabbitmq:
            host:tools.local
            password:guest
            port:5672
        zipkin:
            baseUrl: http://springbootzipkin:7777
        sleuth:
            sampler:
                percentage: 1
                probability: 1
    endpoints:
        prometheus:
            enabled: true 
    management:
        security:
            enabled: false
        endpoint:
            metrics:
                enabled: true
            prometheus:
                enabled: true 
        endpoints:
            web:
                exposure:
                    include: "info, health, prometheus"
            metrics:
                enabled: true
        metrics:
            export:
                prometheus:
                    enabled: true
    #common tags for all metrics
    management.metrics.tags.commonregion: us-east-1
    management.metrics.tags.commonstack: ${SPRING_PROFILE:"unknown"}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: springbootmicroservice
  labels:
    app: springbootmicroservice  
spec:
  serviceName: "springbootmicroservice-hs"
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel  
  selector:
    matchLabels:
      app: springbootmicroservice    
  template:
    metadata:
      labels:
        app: springbootmicroservice
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "9191"        
    spec:
      initContainers:
      #- name: init-springbootmicroservice-monitoring
       # image: openjdk:9
        #command: ['sh', '-c', 'apt update && apt install -y netcat && echo "Waiting monitoring to launch"  && while ! nc -z monitoring-influxdb.kube-system.svc.cluster.local 8086; do   echo "waiting..." ; sleep 5 ; done ;  curl -POST http://monitoring-influxdb.kube-system.svc.cluster.local:8086/query --data-urlencode "q=CREATE DATABASE metrics"']
      containers:
      - name: springbootmicroservice
        image: marcinkasinski/springbootmicroservice
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /actuator/prometheus
            port: 9191
            httpHeaders:
            - name: X-Custom-Header
              value: Awesome
          initialDelaySeconds: 300
          periodSeconds: 10
        ports:
        - name: http
          containerPort: 9191
        env:
        - name: SPRING_PROFILE
          value: "prd"
        - name: "EXTRA_JAVA_ARGS"
          value: "-Dspring.cloud.bootstrap.location=adad"
        - name: MONGODB_URL
          value: "mongodb://mongodb-router-cs.default.svc.cluster.local:27017/mkdatabase"
        - name: KAFKA_BROKER_NODES
          value: "kafka-0.k-hs.default.svc.cluster.local:9092,kafka-1.k-hs.default.svc.cluster.local:9092,kafka-2.k-hs.default.svc.cluster.local:9092"
        volumeMounts:
        - name: config-springbootmicroservice-bootstrap-yml-cm
          mountPath: /usr/src/myapp/config/bootstrap.yml
          subPath: bootstrap.yml
      volumes:
        - name: config-springbootmicroservice-bootstrap-yml-cm
          configMap:
            name: springbootmicroservice-bootstrap-yml-cm
---
apiVersion: v1
kind: Service
metadata:
  name: springbootmicroservice-cs
  labels:
    app: springbootmicroservice
spec:
  type: NodePort
  ports:
  - port: 9191
    targetPort: 9191
    name: http
  selector:
    app: springbootmicroservice
---
apiVersion: v1
kind: Service
metadata:
  name: springbootmicroservice-hs
  labels:
    app: springbootmicroservice
spec:
  ports:
  - port: 9191
    targetPort: 9191
    name: http
  clusterIP: None
  selector:
    app: springbootmicroservice
---
# An Ingress with 2 hosts and 3 endpoints
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: springbootmicroservice-ingress
  annotations:
    ingress.kubernetes.io/enable-cors: "true"
    ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: springbootmicroservice
    http:
      paths:
      - path: /
        backend:
          serviceName: springbootmicroservice-cs
          servicePort: 9191
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: springbootmicroservice
spec:
  maxReplicas: 12
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: springbootmicroservice
  metrics:
  - type: Pods
    pods:
      metricName: "MK_6_received_messages"
      targetAverageValue: 1
