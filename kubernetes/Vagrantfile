# -*- mode: ruby -*-
# vi: set ft=ruby :



Vagrant.require_version ">= 1.6.0"


$initscript = <<SCRIPT
      echo I am provisioning...
      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>machine provisioning "$1

      sudo swapoff -a  
      sudo sed -i -r '/swap/ s/^(.*)$/#\1/g' /etc/fstab
      sudo sed -i -r '/cdrom/ s/^(.*)$/#\1/g' /etc/apt/sources.list
      sudo apt -y update
      sudo apt -y install -y docker.io
      sudo apt install -y curl 
      sudo apt install -y apt-transport-https
      sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      sudo echo "deb http://apt.kubernetes.io/ kubernetes-xenial main"> ~/kubernetes.list 
      sudo mv ~/kubernetes.list /etc/apt/sources.list.d/kubernetes.list
      sudo apt update
      sudo apt install -y kubelet kubeadm kubectl  kubernetes-cni


      #kubectl get nodes
      
      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>machine provisioned "$1


      # nfs biblioteki klienckie
      sudo apt-get install -y nfs-common


SCRIPT

$masterscript = <<SCRIPT
      echo I am provisioning...
      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>machine provisioning "$1
      
      #ls | grep pattern | sed -e 's/^/prefix/' -e 's/$/suffix/'
      
      sudo rm -rf ~/.kube && sudo kubeadm reset && sudo kubeadm init --pod-network-cidr 10.244.0.0/16 --apiserver-advertise-address 192.168.1.227 |  grep "kubeadm join" >join_command 
      
      JOIN_COMMAND="$( cat join_command )"
	  echo "sudo "$JOIN_COMMAND >join_command_sudo 
      

      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>CREATING CONF "

       mkdir -p $HOME/.kube
       sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
       sudo chown $(id -u):$(id -g) $HOME/.kube/config



	  mkdir -p /home/ubuntu/.kube
      sudo cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
      sudo chown ubuntu:ubuntu /home/ubuntu/.kube/config



      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>CREATING CONF"

      kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
	  kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml

      # ingress
      curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/namespace.yaml | kubectl apply -f -
      curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/default-backend.yaml | kubectl apply -f -
      curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/configmap.yaml | kubectl apply -f -
      curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/tcp-services-configmap.yaml | kubectl apply -f -
      curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/udp-services-configmap.yaml | kubectl apply -f -
      curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/rbac.yaml | kubectl apply -f -
      curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/with-rbac.yaml | kubectl apply -f -
      
      # heapster
      curl https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/influxdb/grafana.yaml | kubectl apply -f -
      curl https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/influxdb/influxdb.yaml | kubectl apply -f -
      curl https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/influxdb/heapster.yaml | kubectl apply -f -
      curl https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/rbac/heapster-rbac.yaml | kubectl apply -f -
            
      # moje poprawki : dashboard
      curl https://raw.githubusercontent.com/marcin-kasinski/vagrantProjects/master/kubernetes/yml/dashboard-service-ingress.yaml | kubectl apply -f -
      curl https://raw.githubusercontent.com/marcin-kasinski/vagrantProjects/master/kubernetes/yml/grafana-ingress.yaml | kubectl apply -f -
      curl https://raw.githubusercontent.com/marcin-kasinski/vagrantProjects/master/kubernetes/yml/ingress-service-nodeport.yaml | kubectl apply -f -
            
      kubectl get nodes

      # moje aplikacje
      curl https://raw.githubusercontent.com/marcin-kasinski/vagrantProjects/master/kubernetes/yml/jenkins_dp_and_service.yaml | kubectl apply -f -     

      curl https://raw.githubusercontent.com/marcin-kasinski/vagrantProjects/master/kubernetes/yml/mysql_dp_and_service.yaml | kubectl apply -f -     
      curl https://raw.githubusercontent.com/marcin-kasinski/vagrantProjects/master/kubernetes/yml/phpmyadmin_dp_and_service.yaml | kubectl apply -f -     

      curl https://raw.githubusercontent.com/marcin-kasinski/vagrantProjects/master/kubernetes/yml/elasticsearch.yaml | kubectl apply -f -

      curl https://raw.githubusercontent.com/marcin-kasinski/vagrantProjects/master/kubernetes/yml/logstash.yaml | kubectl apply -f -

      curl https://raw.githubusercontent.com/marcin-kasinski/vagrantProjects/master/kubernetes/yml/kibana.yaml | kubectl apply -f -


      curl https://raw.githubusercontent.com/marcin-kasinski/vagrantProjects/master/kubernetes/yml/SpringBootMicroservice_dp_and_service.yaml  | kubectl apply -f -     
      
      # ----------------------------- nfs -----------------------------
      sudo apt-get install nfs-kernel-server
      # katalog dla joina:
      
      sudo mkdir /var/nfs/kubernetes_share -p
      sudo chown nobody:nogroup /var/nfs/kubernetes_share
      
      sudo mkdir /var/nfs/mysql -p
      sudo chown nobody:nogroup /var/nfs/mysql
      
      sudo mkdir /var/nfs/jenkins -p
      sudo chown nobody:nogroup /var/nfs/jenkins

      #Jesli jenkins nie moze zapisywac do pliku
      sudo chown -R 1000:1000 /var/nfs/jenkins
      sudo chown -R 1000:1000 /var/nfs/mysql

      
      
      sudo sh -c "echo '/var/nfs/kubernetes_share    *(rw,sync,no_subtree_check,no_root_squash)' >> /etc/exports"      
      sudo sh -c "echo '/var/nfs/mysql    *(rw,sync,no_subtree_check,no_root_squash)' >> /etc/exports"      
      sudo sh -c "echo '/var/nfs/jenkins    *(rw,sync,no_subtree_check,no_root_squash)' >> /etc/exports"      
      sudo exportfs -ra
      sudo cp join_command_sudo /var/nfs/kubernetes_share
      # ----------------------------- nfs -----------------------------

      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>machine provisioned "$1
      
SCRIPT

$nodescript = <<SCRIPT
      echo I am node provisioning...
      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>machine provisioning "$1

      echo "Waiting kubernetes master to launch ..."  && while ! nc -z 192.168.1.227 6443; do   echo "waiting ..." ; sleep 5 ; done

      # ----------------------------- nfs -----------------------------
      sudo mkdir -p /nfs/kubernetes_share
      sudo mount k8smaster.local:/var/nfs/kubernetes_share /nfs/kubernetes_share
      JOIN_COMMAND=$(    sudo cat /nfs/kubernetes_share/join_command_sudo  )
      eval $JOIN_COMMAND
      # ----------------------------- nfs -----------------------------


      echo ">>>>>>>>>>>>>>>>>>>>>>>>>>node machine provisioned "$1

SCRIPT


boxes = [
    {
        :name => "k8smaster",
        :interface => "enp3s0",
        :mac=> "5CA1AB1E0001",
        :ip => "192.168.10.10",
        :mem => "15375",
        :cpu => "1"
    },
    {
        :name => "k8snode1",
        :interface => "enp3s0",
        :mac=> "5CA1AB1E0002",
        :ip => "192.168.10.11",
        :mem => "15375",
        :cpu => "1"
    },
    {
        :name => "k8snode2",
        :interface => "enp3s0",
        :mac=> "5CA1AB1E0003",
        :ip => "192.168.10.12",
        :mem => "15375",
        :cpu => "1"
    },
    {
        :name => "k8snode3",
        :interface => "enp3s0",
        :mac=> "5CA1AB1E0004",
        :ip => "192.168.10.13",
        :mem => "15375",
        :cpu => "1"
    },
]

Vagrant.configure(2) do |config|

  config.vm.box = "ubuntu/xenial64"
#  config.vm.box = "ubuntu/trusty64"
#  config.vm.box = "bento/ubuntu-16.04"
  
  #config.vm.box_version = "20171212.0.0"

  boxes.each do |opts|
      config.vm.define opts[:name] do |config|
        config.vm.hostname = opts[:name]
        #config.vm.network :forwarded_port, host: 2222, guest: 22
        #config.ssh.username = "ubuntu"
        #config.ssh.password = "379a8188cba8c5e64b9a429f"

        config.vm.provider "virtualbox" do |v|
          v.customize ["modifyvm", :id, "--memory", opts[:mem]]
          v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]
          v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
          v.name = opts[:name]
        end

        config.vm.network "public_network", bridge: opts[:interface], type: "dhcp" , mac: opts[:mac]        
        #config.vm.network "public_network", bridge: opts[:interface] , mac: opts[:mac], ip: opts[:ip]
        #config.vm.network "private_network" ,  bridge: opts[:interface], ip: opts[:ip]
        
      end
  end






  boxes.each do |opts|
    config.vm.define opts[:name] do |config|
      config.vm.provision "shell" do |s|
        s.inline = $initscript
        s.args = opts[:ip]
      end


 # default router
  config.vm.provision "shell",
    run: "always",
    inline: "sudo route add default gw 192.168.1.1"

  # default router ipv6
  config.vm.provision "shell",
    run: "always",
    inline: "#sudo route -A inet6 add default gw fe80::5ea1:abff:fe1e:1 dev enp0s8"

  # delete default gw on enp0s3 
  config.vm.provision "shell",
    run: "always",
    inline: "sudo route del default gw 10.0.2.2"



    end
  end





   config.vm.define  "k8smaster" do |config|
      config.vm.provision "shell" do |s|
        s.inline = $masterscript
        s.args = "192.168.10.10"
      end
    end



   config.vm.define  "k8snode1" do |config|
      config.vm.provision "shell" do |s|
        s.inline = $nodescript
      end
    end

   config.vm.define  "k8snode2" do |config|
      config.vm.provision "shell" do |s|
        s.inline = $nodescript
      end
    end

   config.vm.define  "k8snode3" do |config|
      config.vm.provision "shell" do |s|
        s.inline = $nodescript
      end
    end


end
